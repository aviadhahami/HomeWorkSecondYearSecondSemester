import java.util.ArrayList;

/*
 * Generated by Aviad Hahami
 * 302188347
 */
public class MergeSortModified implements Sort {
	/*
	 * Divide by 3 merge sort
	 */
	public int[] sort(int[] io_InputArray) {
		return mergeSortThreeWay(io_InputArray);
	}

	/*
	 * Actual sorter, the previous one is just to meet interface
	 */
	private int[] mergeSortThreeWay(int[] i_InputArray) {
		if (i_InputArray.length == 1) {
			return i_InputArray;
		}
		// calculate array size divided by three
		int i_CurrentSizeDividedByThree = i_InputArray.length / 3;

		// allocate new arrays for further usage
		int[] io_LeftArray = new int[i_CurrentSizeDividedByThree];
		int[] io_MiddleArray = new int[i_CurrentSizeDividedByThree];
		int[] io_RightArray = new int[i_CurrentSizeDividedByThree];

		// copy arrays to new allocations
		System.arraycopy(i_InputArray, 0, io_LeftArray, 0, i_CurrentSizeDividedByThree);
		System.arraycopy(i_InputArray, i_CurrentSizeDividedByThree + 1, io_MiddleArray, 0, i_CurrentSizeDividedByThree);
		System.arraycopy(i_InputArray, 2 * i_CurrentSizeDividedByThree + 1, io_RightArray, 0, i_CurrentSizeDividedByThree);

		
		// send to sorter
		io_LeftArray = mergeSortThreeWay(io_LeftArray);
		io_MiddleArray = mergeSortThreeWay(io_MiddleArray);
		io_RightArray = mergeSortThreeWay(io_RightArray);

		return merge(io_LeftArray, io_MiddleArray, io_RightArray);
	}

	private int[] merge(int[] io_LeftArray, int[] io_MiddleArray, int[] io_RightArray) {

		// allocate array list in triple the size
		ArrayList<Integer> i_SortedArray = new ArrayList<Integer>(io_LeftArray.length * 3);

		// allocoate arrays for the inputs
		ArrayList<Integer> i_LeftArray = new ArrayList<>(io_LeftArray.length);
		ArrayList<Integer> i_MiddleArray = new ArrayList<>(io_MiddleArray.length);
		ArrayList<Integer> i_RightArray = new ArrayList<>(io_RightArray.length);

		// copy the stuff
		i_LeftArray.addAll(i_LeftArray);
		i_MiddleArray.addAll(i_MiddleArray);
		i_RightArray.addAll(i_RightArray);

		// initalize some containers
		int i_CurrentLeftElement, i_CurrentMiddleElement, i_CurrentRightElement;
		while (listHasMoreElements(i_LeftArray) && listHasMoreElements(i_MiddleArray) && listHasMoreElements(i_RightArray)) {

			// make it stylish
			i_CurrentLeftElement = i_LeftArray.get(0);
			i_CurrentMiddleElement = i_MiddleArray.get(0);
			i_CurrentRightElement = i_RightArray.get(0);

			// filter by smallest
			if (i_CurrentLeftElement <= i_CurrentRightElement && i_CurrentLeftElement <= i_CurrentMiddleElement) {
				i_SortedArray.add(i_CurrentLeftElement);
				i_LeftArray.remove(0);
			} else if (i_CurrentMiddleElement <= i_CurrentLeftElement && i_CurrentMiddleElement <= i_CurrentRightElement) {
				i_SortedArray.add(i_CurrentMiddleElement);
				i_MiddleArray.remove(0);
			} else {
				i_SortedArray.add(i_CurrentRightElement);
				i_RightArray.remove(0);
			}

		}

		while (listHasMoreElements(i_LeftArray)) {
			i_CurrentLeftElement = i_LeftArray.get(0);
			i_SortedArray.add(i_CurrentLeftElement);
			i_LeftArray.remove(0);
		}
		while (listHasMoreElements(i_MiddleArray)) {
			i_CurrentMiddleElement = i_MiddleArray.get(0);
			i_SortedArray.add(i_CurrentMiddleElement);
			i_MiddleArray.remove(0);
		}
		while (listHasMoreElements(i_LeftArray)) {
			i_CurrentRightElement = i_RightArray.get(0);
			i_SortedArray.add(i_CurrentRightElement);
			i_RightArray.remove(0);
		}
		return convertIntegerArrayListToIntegerArray(i_SortedArray);
	}

	/*
	 * long name for simple iterator
	 */
	private int[] convertIntegerArrayListToIntegerArray(ArrayList<Integer> i_SortedArray) {

		// fixed size
		i_SortedArray.trimToSize();

		// allocate size
		int[] io_CopiedArray = new int[i_SortedArray.size()];
		int i_CopyPointer = 0;

		// copy from the array list to array
		for (int i_currentItem : i_SortedArray) {
			io_CopiedArray[i_CopyPointer] = i_currentItem;
			i_CopyPointer++;
		}

		return io_CopiedArray;
	}

	/*
	 * returns true if the given array has elements
	 */
	private boolean listHasMoreElements(ArrayList<Integer> i_arr) {
		return i_arr.size() == 0 ? false : true;
	}

}
